package aplicacao;

/**
 *
 * @author tysonos
 */
import dao.AssuntoDAO;
import modelo.Assunto;
import modelo.Tarefa;
import dao.DAOFactory;
import dao.TarefaDAO;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.event.TableModelEvent;
import javax.swing.event.TableModelListener;
import javax.swing.table.DefaultTableModel;

public class PainelAssuntoGenerico extends javax.swing.JPanel {
    AssuntoDAO assuntoDAO = DAOFactory.criarAssuntoDAO();
    TarefaDAO tarefaDAO = DAOFactory.criarTarefaDAO();
    DefaultTableModel modelo = null;
    List<Tarefa> listaTarefas = null;
    SimpleDateFormat formato = new SimpleDateFormat("dd/MM/yyyy HH:mm");
    private Assunto assunto;
    boolean statusModificado = false;
    List<Tarefa> listaStatusModificados = new ArrayList<>();

    /**
     * Creates new form PainelAssuntoGenerico
     *
     * @param a
     */
    public PainelAssuntoGenerico(Assunto a) {
        initComponents();
        this.setAssunto(a);

        listaTarefas = tarefaDAO.listar(a.getId());
        modelo = (DefaultTableModel) tabelaTarefas.getModel();
        preencherTabela();
        txtAreaDescricao.setText(a.getDescricao());
        modelo.addTableModelListener(new TableModelListener() {
            @Override
            public void tableChanged(TableModelEvent e) {
                if (e.getType() == 0) {
                    int row = e.getFirstRow();
                    int column = e.getColumn();
                    Object data = modelo.getValueAt(row, column);
                    if (data instanceof Boolean) {
                        if(!listaStatusModificados.contains(listaTarefas.get(row)))
                          listaStatusModificados.add(listaTarefas.get(row));
                        listaTarefas.get(row).setConcluida((Boolean) data);
                        setStatusModificado(true);
                        atualizaBarraProgresso(listaTarefas);
                    }
                }
            }
        });
    }

    public boolean isStatusModificado() {
        return statusModificado;
    }

    public void setStatusModificado(boolean statusModificado) {
        this.statusModificado = statusModificado;
    }

    private void atualizaBarraProgresso(List<Tarefa> tarefas) {
        int totalTarefas = tarefas.size(), tarefasConcluidas = 0;
        int porcentagem = 0;
        if (totalTarefas > 0) {
            for (Tarefa tarefa : tarefas) {
                if (tarefa.isConcluida()) {
                    tarefasConcluidas++;
                }
            }
            porcentagem = (100 * tarefasConcluidas) / totalTarefas;
        }
        barraProgresso.setValue(porcentagem);
        barraProgresso.setString(Integer.toString(porcentagem) + "%");
    }

    public void preencherTabela() {
        for (Tarefa tarefa : listaTarefas) {
            Date prazoConclusao = tarefa.getPrazoConclusao();
            modelo.addRow(new Object[]{
                tarefa.getTitulo(),
                tarefa.getDescricao(),
                prazoConclusao != null ? formato.format(prazoConclusao) : null,
                tarefa.isConcluida()});
        }
        atualizaBarraProgresso(listaTarefas);

    }
    public void addTarefa(Tarefa t){
        listaTarefas.add(t);
        Date prazoConclusao = t.getPrazoConclusao();
        modelo.addRow(new Object[]{t.getTitulo(),
            t.getDescricao(),
            prazoConclusao != null ? formato.format(prazoConclusao) : null,
            t.isConcluida()});
        atualizaBarraProgresso(listaTarefas);
    }
    
    public void updateTarefa(Tarefa t){
        int linhaSel = tabelaTarefas.getSelectedRow();
        Date prazoConclusao = t.getPrazoConclusao();
        modelo.setValueAt(t.getTitulo(), linhaSel, 0);
        modelo.setValueAt(t.getDescricao(), linhaSel, 1);
        modelo.setValueAt(prazoConclusao!=null?formato.format(prazoConclusao):null, linhaSel, 2);
        modelo.setValueAt(t.isConcluida(), linhaSel, 3);
    }
    
    public void deleteTarefa(Tarefa t){
        modelo.removeRow(tabelaTarefas.getSelectedRow());
        listaTarefas.remove(t);
        atualizaBarraProgresso(listaTarefas);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel2 = new javax.swing.JLabel();
        barraProgresso = new javax.swing.JProgressBar();
        btnAddTarefa = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelaTarefas = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaDescricao = new javax.swing.JTextArea();
        btnEditarAssunto = new javax.swing.JButton();
        btnApagarAssunto = new javax.swing.JButton();
        btnEditarTarefa = new javax.swing.JButton();

        setMaximumSize(new java.awt.Dimension(20, 20));
        setMinimumSize(new java.awt.Dimension(50, 80));
        setName(""); // NOI18N
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentHidden(java.awt.event.ComponentEvent evt) {
                formComponentHidden(evt);
            }
        });
        addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                formPropertyChange(evt);
            }
        });

        jLabel2.setText("Progresso:");

        barraProgresso.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        barraProgresso.setMinimumSize(new java.awt.Dimension(100, 80));
        barraProgresso.setStringPainted(true);

        btnAddTarefa.setText("Nova Tarefa");
        btnAddTarefa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTarefaActionPerformed(evt);
            }
        });

        tabelaTarefas.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Tarefas", "Descrição", "Concluir até", "Concluida"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.Object.class, java.lang.Boolean.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, true
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabelaTarefas.getTableHeader().setReorderingAllowed(false);
        tabelaTarefas.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                tabelaTarefasFocusGained(evt);
            }
            public void focusLost(java.awt.event.FocusEvent evt) {
                tabelaTarefasFocusLost(evt);
            }
        });
        tabelaTarefas.addPropertyChangeListener(new java.beans.PropertyChangeListener() {
            public void propertyChange(java.beans.PropertyChangeEvent evt) {
                tabelaTarefasPropertyChange(evt);
            }
        });
        jScrollPane1.setViewportView(tabelaTarefas);
        tabelaTarefas.getColumnModel().getSelectionModel().setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        if (tabelaTarefas.getColumnModel().getColumnCount() > 0) {
            tabelaTarefas.getColumnModel().getColumn(1).setResizable(false);
            tabelaTarefas.getColumnModel().getColumn(2).setMinWidth(110);
            tabelaTarefas.getColumnModel().getColumn(2).setMaxWidth(110);
            tabelaTarefas.getColumnModel().getColumn(3).setMinWidth(100);
            tabelaTarefas.getColumnModel().getColumn(3).setMaxWidth(100);
        }

        txtAreaDescricao.setEditable(false);
        txtAreaDescricao.setColumns(20);
        txtAreaDescricao.setLineWrap(true);
        txtAreaDescricao.setRows(5);
        txtAreaDescricao.setWrapStyleWord(true);
        jScrollPane2.setViewportView(txtAreaDescricao);

        btnEditarAssunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/icones/pencil.png"))); // NOI18N
        btnEditarAssunto.setToolTipText("Editar assunto");
        btnEditarAssunto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnEditarAssunto.setMaximumSize(new java.awt.Dimension(32, 32));
        btnEditarAssunto.setPreferredSize(new java.awt.Dimension(36, 36));
        btnEditarAssunto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnEditarAssuntoMouseClicked(evt);
            }
        });
        btnEditarAssunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarAssuntoActionPerformed(evt);
            }
        });

        btnApagarAssunto.setIcon(new javax.swing.ImageIcon(getClass().getResource("/recursos/icones/delete.png"))); // NOI18N
        btnApagarAssunto.setToolTipText("Apagar assunto");
        btnApagarAssunto.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        btnApagarAssunto.setFocusPainted(false);
        btnApagarAssunto.setMargin(new java.awt.Insets(2, 2, 2, 2));
        btnApagarAssunto.setPreferredSize(new java.awt.Dimension(36, 36));
        btnApagarAssunto.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                btnApagarAssuntoMouseClicked(evt);
            }
        });
        btnApagarAssunto.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnApagarAssuntoActionPerformed(evt);
            }
        });

        btnEditarTarefa.setText("Editar");
        btnEditarTarefa.setEnabled(false);
        btnEditarTarefa.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditarTarefaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane2)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 508, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(4, 4, 4)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(barraProgresso, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnEditarTarefa, javax.swing.GroupLayout.PREFERRED_SIZE, 80, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnAddTarefa))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnEditarAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnApagarAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addComponent(jLabel2)
                    .addComponent(barraProgresso, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddTarefa)
                    .addComponent(btnEditarTarefa))
                .addGap(12, 12, 12)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 61, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(12, 12, 12)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnApagarAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnEditarAssunto, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        getAccessibleContext().setAccessibleName("");
        getAccessibleContext().setAccessibleDescription("");
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddTarefaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTarefaActionPerformed
        // TODO add your handling code here:
        new EditorTarefa(null, true, this, null).setVisible(true);
    }//GEN-LAST:event_btnAddTarefaActionPerformed

    private void tabelaTarefasPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_tabelaTarefasPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_tabelaTarefasPropertyChange

    private void formPropertyChange(java.beans.PropertyChangeEvent evt) {//GEN-FIRST:event_formPropertyChange
        // TODO add your handling code here:
    }//GEN-LAST:event_formPropertyChange

    private void btnEditarAssuntoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnEditarAssuntoMouseClicked
        // TODO add your handling code here:
        new EditorAssunto(null, true, this.getAssunto()).setVisible(true);
    }//GEN-LAST:event_btnEditarAssuntoMouseClicked

    private void btnApagarAssuntoMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_btnApagarAssuntoMouseClicked
        // TODO add your handling code here:
    }//GEN-LAST:event_btnApagarAssuntoMouseClicked

    private void btnApagarAssuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnApagarAssuntoActionPerformed
        // TODO add your handling code here:
        int res = JOptionPane.showConfirmDialog(this, "Apagar definitivamente: "
                + this.getAssunto().getTitulo(), null, JOptionPane.YES_NO_OPTION);
        if (res == 0) {
            try {
                assuntoDAO.apagar(this.getAssunto().getId());
                telaPrincipal.removeAssunto(this);
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(this, "Erro ao deletar assunto!", "ERRO", JOptionPane.WARNING_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnApagarAssuntoActionPerformed

    private void btnEditarAssuntoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarAssuntoActionPerformed
        // TODO add your handling code here:
        new EditorAssunto(null, true, this.getAssunto()).setVisible(true);
    }//GEN-LAST:event_btnEditarAssuntoActionPerformed
    private void salvarStatus() {
        if (this.isStatusModificado()) {
            try {
                for (Tarefa modificada : listaStatusModificados) {
                    tarefaDAO.editar(modificada);
                    this.setStatusModificado(false);
                }
                listaStatusModificados.clear();
            } catch (Exception e) {
                e.printStackTrace();
                JOptionPane.showMessageDialog(null, "Erro ao salvar mudanças no banco", null, JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
    }

    private void formComponentHidden(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentHidden
        // TODO add your handling code here:
        salvarStatus();
    }//GEN-LAST:event_formComponentHidden

    private void btnEditarTarefaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditarTarefaActionPerformed
        // TODO add your handling code here:
        Tarefa tSel = listaTarefas.get(tabelaTarefas.getSelectedRow());
        new EditorTarefa(null, true, this, tSel).setVisible(true);
        btnEditarTarefa.setEnabled(false);
    }//GEN-LAST:event_btnEditarTarefaActionPerformed

    private void tabelaTarefasFocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabelaTarefasFocusGained
        // TODO add your handling code here:
        btnEditarTarefa.setEnabled(true);
    }//GEN-LAST:event_tabelaTarefasFocusGained

    private void tabelaTarefasFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_tabelaTarefasFocusLost
        // TODO add your handling code here:
        int tSel = tabelaTarefas.getSelectedRow();
        if (tSel < 0)
            btnEditarAssunto.setEnabled(false);
    }//GEN-LAST:event_tabelaTarefasFocusLost


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JProgressBar barraProgresso;
    private javax.swing.JButton btnAddTarefa;
    private javax.swing.JButton btnApagarAssunto;
    private javax.swing.JButton btnEditarAssunto;
    private javax.swing.JButton btnEditarTarefa;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable tabelaTarefas;
    private javax.swing.JTextArea txtAreaDescricao;
    // End of variables declaration//GEN-END:variables

    public Assunto getAssunto() {
        return assunto;
    }

    public void setAssunto(Assunto a) {
        this.assunto = a;
    }
}
